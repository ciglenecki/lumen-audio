{"openapi": "3.0.2", "info": {"title": "FastAPI", "description": "API used for testing and predicting audio data on trained models.\n\n\tusage: python3 src/server/main.py [--port int] [-h] [--hot-reload] --model-dir Path\n\t               [--add-instrument-metrics] [--host str] [--device str]\n\t\n\toptions:\n\t  -h, --help            show this help message and exit\n\t\n\tScript arguments:\n\t  --port int            Server port. (default: 8090)\n\t  --hot-reload          Use hot reload, not recommanded. (default: False)\n\t  --model-dir Path      Directory which to model checkpoints (.ckpt files)\n\t                        (default: None)\n\t  --add-instrument-metrics\n\t                        Add instrument metrics to the response. This will\n\t                        increase number of items in API response size by\n\t                        (instrument count * number of metrics) (default:\n\t                        False)\n\t  --host str            Server host. (default: localhost)\n\t  --device str          The device to be used eg. cuda:0. (default: cuda:0)\n\t", "version": "0.1.0"}, "paths": {"/models": {"get": {"tags": ["Resources"], "summary": "Get Models", "description": "Returns paths to all available models on the server. Use these model paths for all `POST` request predictions. Models are fetched from the directory `--model-dir`. Only models with the extension `*.ckpt` are fetched.", "operationId": "get_models_models_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Models Models Get", "type": "array", "items": {"type": "string", "format": "path"}}}}}}}}, "/model/test-directory-stream": {"post": {"tags": ["Model Inference"], "summary": "Test Directory Stream", "description": "Streams classes of audios from a directory and returns metrics for multiclass classification. Streaming is useful if your directory is large and you don't want to wait for the whole directory to be processed. If you want to process the whole directory at once, use the endpoint `test-directory`", "operationId": "test_directory_stream_model_test_directory_stream_post", "parameters": [{"required": true, "schema": {"title": "Model Checkpoint", "type": "string", "format": "path"}, "name": "model_checkpoint", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Dataset Dirs", "type": "array", "items": {"$ref": "#/components/schemas/TypeDatasetDict"}}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PredictionsWithMetrics"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/model/test-directory": {"post": {"tags": ["Model Inference"], "summary": "Test Directory", "description": "Infers classes of audios from a directory and returns metrics for multiclass classification.", "operationId": "test_directory_model_test_directory_post", "parameters": [{"required": true, "schema": {"title": "Model Checkpoint", "type": "string", "format": "path"}, "name": "model_checkpoint", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Dataset Dirs", "type": "array", "items": {"$ref": "#/components/schemas/TypeDatasetDict"}}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PredictionsWithMetrics"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/model/predict-directory-stream": {"post": {"tags": ["Model Inference"], "summary": "Predict Directory Stream", "description": "Streams classes of audios from a directory. Streaming is useful if your directory is large and you don't want to wait for the whole directory to be processed. If you want to process the whole directory at once, use the endpoint `predict-directory`", "operationId": "predict_directory_stream_model_predict_directory_stream_post", "parameters": [{"required": true, "schema": {"title": "Model Checkpoint", "type": "string", "format": "path"}, "name": "model_checkpoint", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Dataset Dirs", "type": "array", "items": {"$ref": "#/components/schemas/TypeDatasetDict"}}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Predict Directory Stream Model Predict Directory Stream Post", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/JsonPrediction"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/model/predict-directory": {"post": {"tags": ["Model Inference"], "summary": "Predict Directory", "description": "Infers classes of audios from a directory.", "operationId": "predict_directory_model_predict_directory_post", "parameters": [{"required": true, "schema": {"title": "Model Checkpoint", "type": "string", "format": "path"}, "name": "model_checkpoint", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Dataset Dirs", "type": "array", "items": {"$ref": "#/components/schemas/TypeDatasetDict"}}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Predict Directory Model Predict Directory Post", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/JsonPrediction"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/model/predict-files": {"post": {"tags": ["Model Inference"], "summary": "Predict Files", "description": "Infers classes of audios from a list of files.", "operationId": "predict_files_model_predict_files_post", "parameters": [{"required": true, "schema": {"title": "Model Checkpoint", "type": "string", "format": "path"}, "name": "model_checkpoint", "in": "query"}], "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body_predict_files_model_predict_files_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Predict Files Model Predict Files Post", "type": "array", "items": {"$ref": "#/components/schemas/JsonPrediction"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/dataset-types": {"get": {"tags": ["Resources"], "summary": "Get Supported Datasets", "description": "Returns dataset types, each dataset type has a strategy for loading labels from a given directory. If you don't have labels or don't care about them, you can use the empty string `\"\"` which only loads the audio. If you want to load labels use the following dataset types: ['irmastrain', 'irmastest', 'openmic', 'csv', 'inference']", "operationId": "get_supported_datasets_dataset_types_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Supported Datasets Dataset Types Get", "type": "array", "items": {"type": "string"}}}}}}}}}, "components": {"schemas": {"Body_predict_files_model_predict_files_post": {"title": "Body_predict_files_model_predict_files_post", "required": ["audio_files"], "type": "object", "properties": {"audio_files": {"title": "Audio Files", "type": "array", "items": {"type": "string", "format": "binary"}}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "JsonPrediction": {"title": "JsonPrediction", "required": ["cel", "cla", "flu", "gac", "gel", "org", "pia", "sax", "tru", "vio", "voi"], "type": "object", "properties": {"cel": {"title": "Cel", "type": "number"}, "cla": {"title": "Cla", "type": "number"}, "flu": {"title": "Flu", "type": "number"}, "gac": {"title": "Gac", "type": "number"}, "gel": {"title": "Gel", "type": "number"}, "org": {"title": "Org", "type": "number"}, "pia": {"title": "Pia", "type": "number"}, "sax": {"title": "Sax", "type": "number"}, "tru": {"title": "Tru", "type": "number"}, "vio": {"title": "Vio", "type": "number"}, "voi": {"title": "Voi", "type": "number"}}}, "PredictionsWithMetrics": {"title": "PredictionsWithMetrics", "required": ["accuracy", "hamming_distance", "f1", "precision", "recall", "predictions"], "type": "object", "properties": {"accuracy": {"title": "Accuracy", "type": "number"}, "hamming_distance": {"title": "Hamming Distance", "type": "number"}, "f1": {"title": "F1", "type": "number"}, "precision": {"title": "Precision", "type": "number"}, "recall": {"title": "Recall", "type": "number"}, "predictions": {"title": "Predictions", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/JsonPrediction"}}}}, "SupportedDatasetDirType": {"title": "SupportedDatasetDirType", "enum": ["irmastrain", "irmastest", "openmic", "csv", "inference"], "description": "List of SupportedDatasetDirType we use."}, "TypeDatasetDict": {"title": "TypeDatasetDict", "required": ["dataset_type", "dataset_path"], "type": "object", "properties": {"dataset_type": {"$ref": "#/components/schemas/SupportedDatasetDirType"}, "dataset_path": {"title": "Dataset Path", "type": "string", "format": "path"}}, "example": {"dataset_type": "irmastest", "dataset_path": "data/irmas/test"}}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}}, "tags": [{"name": "Resources", "description": "Models and datasets available for inference."}, {"name": "Model Inference", "description": "Endpoints used for predicting audio data on trained models. Curl example for multiple audios:\n\n    curl -X 'POST' \\\n        'http://localhost:8090/model/predict-files?model_checkpoint=models%2Fmy_model.ckpt' \\\n        -H 'accept: application/json' \\\n        -H 'Content-Type: multipart/form-data' \\\n        -F 'audio_files=@track_23.wav;type=audio/wav'\n"}]}
